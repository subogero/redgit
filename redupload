#!/usr/bin/perl
# Copyright: SZABO Gergely <szg@subogero.com>
# License  : WTFPL v2 <http://www.wtfpl.net/txt/copying/>
sub help {
    print <<EOF;
Usage:
redupload -p <project> [<url>] <file>
redupload -i <issue> [<url>] <file>
redupload -v <version> [<url>] <file>
redupload <server> <project> <file>
Upload a file to Redmine.
In the first form just specify a server name, '/redmine' will be appended.
In the second form specify the entire url of the Redmine installation.
<server>      URL of the server, assumes Redmine installed in /redmine
-p <project>  Short project id
-i <issue>    Issue id
-v <version   Version id
<url>         URL of Redmine root, taken from ~/.redgit if omitted
<file>        Local path of the file to upload
-h            Show this help text
EOF
    exit shift;
}
use WWW::Mechanize;
use Term::ReadKey;

our $url;
if (open CFG, "$ENV{HOME}/.redgit") {
    my $section = '';
    while (<CFG>) {
        $section = $1 if /^\[(.+)\]/;
        next unless $section eq 'redgit';
        s/\r|\n//g;
        if (/^http=(.+)/) {
            $url = $1;
            last;
        }
    }
    close CFG;
}

# Arguments
help 0 if $ARGV[0] eq '-h';
# 1st form of args
if ($ARGV[0] eq '-p') {
    shift;
    $pj = shift;
    help 2 unless $pj =~ /[-\w]{1,100}/;
    $url = shift if @ARGV >= 2;
    $file = shift or help 3;
}
# 2nd form of args
elsif ($ARGV[0] eq '-i') {
    shift;
    $is = shift;
    help 4 unless $is =~ /^\d+$/;
    $url = shift if @ARGV >= 2;
    $file = shift or help 5;
}
# 3rd form of args
elsif ($ARGV[0] eq '-v') {
    shift;
    $ver = shift;
    help 4 unless $ver =~ /^\d+$/;
    $url = shift if @ARGV >= 2;
    $file = shift or help 5;
}
# 4th form of args
else {
    our ($server, $pj, $file) = @ARGV;
    help 6 unless $server && $pj && $file;
    $url = "$server/redmine";
}
our $project = $pj && "projects/$pj";
our $issue = $is && "issues/$is";
our $version = $ver && "versions/$ver";
$url =~ s|^|http://| unless $url =~ m|^\w+://|;

# Authentication
print "$url username: "; (my $user = <STDIN>) =~ s/[\r\n]//g;
ReadMode 'noecho';
print "$url password: "; (my $password = <STDIN>) =~ s/[\r\n]//g;
ReadMode 0;
print "\n";

my $mech = WWW::Mechanize->new(cookie_jar => {});
$mech->agent_alias("Linux Mozilla");

$mech->get("$url/login");
$mech->submit_form( with_fields => {
        username => $user,
        password => $password
    }
);
$mech->cookie_jar->save("$ENV{HOME}/.redcookie");

$page = $project ? "$url/$project/files/new"
      : $issue   ? "$url/$issue"
      : $version ? "$url/$version"
      :            "";
help 7 unless $page;
$mech->get($page);
# -v version: First follow to the wiki edit page
if ($version) {
    my ($vername, $pjname) = split / - /, $mech->title;
    undef $page;
    foreach ($mech->links) {
        my $link = $_->url;
        next unless $link =~ m|projects/.+/wiki/.+/edit$|;
        $link =~ s|^/redmine/||;
        $page = "$url/$link";
        $mech->get($page);
        last;
    }
    die "Project $pjname version $vername has no Wiki page" unless $page;
    print "Uploading to project $pjname version $vername\n";
}
# Find file upload form field and go
our $field;
FORMS:
foreach ($mech->forms) {
    foreach ($_->inputs) {
        $name = $_->name;
        if ($name =~ /attachments.+file/) {
            $field = $name;
            last FORMS;
        }
    }
}
die "No file attachment form field available!" unless $field;
$mech->submit_form(with_fields => { $field => $file });
