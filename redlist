#!/usr/bin/perl
# Copyright: SZABO Gergely <szg@subogero.com>
# License  : WTFPL v2 <http://www.wtfpl.net/txt/copying/>
sub help {
    print <<EOF;
Usage: redlist [ -p <project> ] [<url>] | -h
List issues from a Redmine server in plain text format.
-p <project>  Filter for project id
<url>         URL of Redmine root, taken from ~/.redgit if omitted
-h            Show this help text
EOF
    exit shift;
}
sub uprintf; sub ulength;

help 0 if $ARGV[0] eq '-h';
our $project = '';
if ($ARGV[0] eq '-p') {
    shift;
    $project = shift;
    $project = $project =~ /[-\w]{1,100}/
             ? "/projects/$project"
             : '';
}

unless (our $url = shift) {
    open CFG, "$ENV{HOME}/.redgit" or die $!;
    my $section = '';
    while (<CFG>) {
        $section = $1 if /^\[(.+)\]/;
        next unless $section eq 'redgit';
        s/\r|\n//g;
        if (/^http=(.+)/) {
            $url = $1;
            last;
        }
    }
    close CFG;
}
$url =~ s|/$||;
$url .= "$project/issues.csv";
$url =~ s|^|http://| unless $url =~ m|^\w+://|;

our @issues;
our $n_iss = 0;
open CURL, "curl $url 2>/dev/null |" or die $!;
our @heading = split /,|\n/, <CURL>;
our %width;
foreach (@heading) {
    $issues[$n_iss]->{$_} = $_;
    $width{$_} = length;
}
$n_iss++;
our $n_fld = 0;
our $multiline;
while (<CURL>) {
    while (1) {
        my $heading = $heading[$n_fld];
        s/""/''/g if $multiline;
        if (!$multiline && s/^"([^"]*\n)//) {
            $multiline = $1;
        } elsif ($multiline && s/^([^"]*\n)//) {
            $multiline .= $1;
        } elsif ($multiline && s/^(.*)"[,\n]//) {
            $multiline .= $1;
            $issues[$n_iss]->{$heading} = $multiline;
            my $l = ulength $multiline;
            $width{$heading} = $l if $l > $width{$heading};
            $n_fld++;
            $multiline = '';
        } elsif (s/^"(.*?)"[,\n]// || s/^([^"]*?)[,\n]//) {
            $issues[$n_iss]->{$heading} = $1;
            my $l = ulength $1;
            $width{$heading} = $l if $l > $width{$heading};
            $n_fld++;
        } elsif (/^$/) {
            unless ($multiline) {
                $n_fld = 0;
                $n_iss++
            }
            last;
        } else {
            warn "Error! Fields:\n$issues[$n_iss]->{$_} " foreach (@heading);
            warn "Partial multiline:\n$multiline\n";
            warn "Remainder of line:\n$_";
            die;
        }
    }
}

our %filters;
if (open CFG, "$ENV{HOME}/.redgit") {
    my $section = '';
    while (<CFG>) {
        $section = $1 if /^\[(.+)\]/;
        next unless $section eq 'redlist';
        s/\r|\n//g;
        $filters{$_} = 1;
    }
}
close CFG;
foreach my $issue (@issues) {
    foreach my $fld (@heading) {
        next if $filters{$fld};
        my $format = "%-$width{$fld}s ";
        $format =~ s/-// if $issue->{$fld} =~ /^\d+$/;
        uprintf $format, $issue->{$fld};
    }
    print "\n";
}

sub uprintf {
    my $format = shift;
    my @format;
    while ($format) {
        if ($format =~ s/^([^%]+)//) {
            push @format, $1;
        }
        elsif ($format =~ s/^(%.*?[%csduoxefgXEGbBpniDUOF])//) {
            push @format, $1;
        }
    }
    my $i = 0;
    foreach (@_) {
        my $incr = length($_) - ulength($_);
        if ($incr) {
            $i++ while $format[$i] !~ /^%[^%]/ && $i < $#format;
            die "Wrong number of uprintf params\n" unless $format[$i];
            $format[$i] =~ /^(\D+)(\d*)(\D+)$/;
            my ($pre, $num, $post) = ($1, $2, $3);
            $num += $incr if $num;
            $format[$i] = "$pre$num$post";
        }
    }
    $format .= $_ foreach (@format);
    printf $format, @_;
}

sub ulength {
    my $string = shift;
    my @codes = unpack "U*", $string;
    my $exotic = 0;
    my $length = 0;
    foreach (@codes) {
        if (!$exotic && $_ > 127) {
            $exotic = 1;
            $length++;
        }
        if ($_ <= 127) {
            $exotic = 0;
            $length++;
        }
    }
    $length;
}
